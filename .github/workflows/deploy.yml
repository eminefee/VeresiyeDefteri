name: Build and Deploy to VPS

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Kodları çek
      uses: actions/checkout@v3

    - name: SSH anahtarını ayarla
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts

    - name: VPS bağlantısını test et
      run: |
        ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH bağlantısı başarılı'"

    - name: Hedef klasörü oluştur
      run: |
        ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /root/app"

    - name: Dosyaları VPS'e kopyala
      run: |
        rsync -avz --delete -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/root/app/

    - name: VPS üzerinde Docker işlemleri
      run: |
        ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e  # Hata olursa işlemi durdur
          cd /root/app
          # Eski container ve image'ı temizle
          docker stop buisness-container || true
          docker rm buisness-container || true
          docker rmi buisness-app || true
          
          # Dockerfile için context ve path'i kontrol et
          if [ ! -f ./Buisness/Dockerfile ]; then
            echo "HATA: /root/app/Buisness/Dockerfile dosyası bulunamadı!"
            exit 1
          fi
          
          # Docker image build
          docker build -t buisness-app -f ./Buisness/Dockerfile /root/app
          
          # Container başlat
          docker run -d -p 80:80 --name buisness-container buisness-app
        EOF
